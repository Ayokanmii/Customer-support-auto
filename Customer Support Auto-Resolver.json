{
  "name": "Customer Support Auto-Resolver",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {
          "labelIds": [
            "Label_3888370239490810164"
          ],
          "readStatus": "unread"
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -832,
        160
      ],
      "id": "cd5a6e74-80ce-4dfe-a82f-3c77358f2c4f",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "bGoOLU4g6w0bknyx",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "console.log('Raw Gmail Input:', JSON.stringify($json, null, 2));\nconst msg = $json || {};\nfunction stripHtml(html) {\n  return html.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim();\n}\nconst body = (msg.text || stripHtml(msg.html || '') || msg.snippet || '').toString();\nconst orderIdMatch = body.match(/(ORDER|ORD|#)\\s*[-:]?\\s*([A-Z0-9_-]{4,})/i);\nconst orderId = orderIdMatch ? orderIdMatch[2] : '';\nconst fromEmail =\n  (msg.from?.match(/<(.+?)>/)?.[1]) ||\n  msg.from ||\n  (msg.payload?.headers?.find(h => h.name.toLowerCase() === 'from')?.value?.match(/<(.+?)>/)?.[1]) ||\n  (body.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/ig) || [])[0] || '';\nconsole.log('Extracted:', { fromEmail, orderId, body: body.substring(0, 100) });\nreturn [\n  {\n    subject: msg.subject || '',\n    body,\n    fromEmail,\n    rawFrom: msg.from || '',\n    messageId: msg.id || '',\n    channel: 'email',\n    receivedAt: msg.date || new Date().toISOString(),\n    guessedOrderId: orderId,\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        160
      ],
      "id": "67428f45-c7e5-4e06-9074-12182ffd0f90",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "661c5cf0-3be0-452d-84c5-3236af5d3d05",
              "leftValue": "={{$json.guessedOrderId}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -416,
        160
      ],
      "id": "882f95b6-173f-46a1-bf30-62f163fa87ef",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "console.log('Reply Input:', { messageId: $json.messageId, fromEmail: $json.fromEmail, guessedOrderId: $json.guessedOrderId }); return [$json];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        464
      ],
      "id": "219076b9-69df-456e-a8af-2c86dd05ddda",
      "name": "Debug Reply"
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{$json.messageId}}",
        "message": "=Hello,\n<p>Thanks for your message. Weâ€™ve received it and our team will review it shortly.</p>\n<p>Regards,<br/>Support Team</p>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -400,
        320
      ],
      "id": "868037a0-1eb0-4025-9c7e-9540ee307213",
      "name": "Reply to a message",
      "webhookId": "e2f88035-f8b0-48e8-9772-d60a857ec7ba",
      "credentials": {
        "gmailOAuth2": {
          "id": "bGoOLU4g6w0bknyx",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Generate a professional, concise reply to this customer email. Keep it under 120 words. Mention order ID if found ({{$json.guessedOrderId}}). Ask for missing details only if necessary. Return plain text.\n\nEmail: {{$json.body}}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -176,
        144
      ],
      "id": "a85be948-a6fc-46cd-b1e6-bb34f74a30ae",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "openai/gpt-3.5-turbo-instruct",
        "options": {
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        48,
        32
      ],
      "id": "346f7eda-0f07-47ad-9da0-6a97ef8b25a5",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "9vFLTZalfVdLgkEh",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const out = $items()[0].json;\nlet text = out.generated_text || out.text || out.response || out.output || out.result || '';\nif(!text && out.choices && out.choices[0]) {\n  text = out.choices[0].message?.content || out.choices[0].text || '';\n}\nif(!text && Array.isArray(out) && out[0]) {\n  text = out[0].generated_text || out[0].text || '';\n}\nif(!text) text = JSON.stringify(out).slice(0,200);\nreturn [{ \n  ...$json,\n  aiDraft: (text || '').toString().trim(),\n  prompt_used: \"Auto-generated via OpenRouter\"\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        144
      ],
      "id": "48e7d7b9-f8d3-4c6f-8fc8-8694bf18bda2",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "console.log('Send Input:', { fromEmail: $json.fromEmail, aiDraft: $json.aiDraft, messageId: $json.messageId });\nif (!$json.fromEmail) {\n  console.log('Invalid or missing fromEmail, skipping send:', JSON.stringify($json, null, 2));\n  return [];\n}\nreturn [$json];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        144
      ],
      "id": "3a1054a2-ea1e-4677-aa72-484aa46abb38",
      "name": "Debug Send"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.fromEmail || 'support@example.com' }}",
        "subject": "ðŸ“© Automated Response from Our AI Assistant",
        "message": "={{$json.aiDraft || 'Dear User, Thank you for reaching out. This is an automated response. We have received your message and will get back to you shortly. Best regards, Support Team'}}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        352,
        48
      ],
      "id": "e2082fa9-66f2-4f84-ac69-8770ae63d2a5",
      "name": "Send a message",
      "webhookId": "f5126120-bc26-4682-930c-aae54c5f0546",
      "credentials": {
        "gmailOAuth2": {
          "id": "bGoOLU4g6w0bknyx",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1iLSihsTZfUVbKqU6-TpZUD_zXU-q8SZZxCLpSjJqZTM",
          "mode": "list",
          "cachedResultName": "support_db"
        },
        "sheetName": {
          "__rl": true,
          "value": 926127418,
          "mode": "list",
          "cachedResultName": "support_logs_template (1)"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ts": "={{ new Date().toISOString() }}",
            "channel": "={{ $json.channel }}",
            "from": "={{ $json.fromEmail }}",
            "subject": "={{ $json.subject }}",
            "intent": "={{ $json.guessedOrderId }}",
            "confidence": "={{ $json.aiDraft || $json.body.substring(0, 100) }}"
          },
          "matchingColumns": [
            "intent"
          ],
          "schema": [
            {
              "id": "ts",
              "displayName": "ts",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "channel",
              "displayName": "channel",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "from",
              "displayName": "from",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "subject",
              "displayName": "subject",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "intent",
              "displayName": "intent",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "confidence",
              "displayName": "confidence",
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        224,
        336
      ],
      "id": "e8baaa07-0b02-4739-ab41-d3f5da148cb9",
      "name": "Append or update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "kFZWyYgv1cluIy5e",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "15juu2YHx9bZT6eD4_Z4Ro9s1dJzv1KN3alVb7b_deC4",
          "mode": "list",
          "cachedResultName": "support_logs_template (1)"
        },
        "sheetName": {
          "__rl": true,
          "value": 1879215493,
          "mode": "list",
          "cachedResultName": "support_logs_template (1)"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ts": "={{ new Date().toISOString() }}",
            "channel": "={{ $('Code').item.json.channel }}",
            "from": "={{ $('Code').item.json.fromEmail }}",
            "subject": "={{ $('Code').item.json.subject }}",
            "intent": "={{ $('Code').item.json.guessedOrderId }}",
            "confidence": "={{ $('Code').item.json.body.substring(0, 100) }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "ts",
              "displayName": "ts",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "channel",
              "displayName": "channel",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "from",
              "displayName": "from",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "subject",
              "displayName": "subject",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "intent",
              "displayName": "intent",
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "confidence",
              "displayName": "confidence",
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -192,
        320
      ],
      "id": "ec9ba038-ba9a-40c4-acd7-401cf29203fc",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "kFZWyYgv1cluIy5e",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Debug Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Reply": {
      "main": [
        [
          {
            "node": "Reply to a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply to a message": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Debug Send",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append or update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Send": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "34356154-f03d-44cb-af40-561343646b64",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f739b75569b675c0f98ff3524581fe3cc5a241b7c1f226618b2b3f0854bf1f57"
  },
  "id": "U9fnms0dHb7W0g3b",
  "tags": []
}